# Makefile para Texta AI - Ferramentas de Desenvolvimento
# Uso: make [comando]

.PHONY: help install dev-install check format format-black fix lint test coverage clean all setup

# Detectar Python 
PYTHON := $(shell command -v python3 2>/dev/null || command -v python 2>/dev/null)
PIP := $(shell command -v pip3 2>/dev/null || command -v pip 2>/dev/null)

# Diret√≥rios principais
SRC_DIR := src
TEST_DIR := tests
SCRIPTS_DIR := scripts

# Cores para output
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

help: ## Mostra esta mensagem de ajuda
	@echo "$(GREEN)Texta AI - Ferramentas de Desenvolvimento$(NC)"
	@echo ""
	@echo "$(YELLOW)Comandos dispon√≠veis:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)Exemplos:$(NC)"
	@echo "  make setup     # Configura√ß√£o inicial completa"
	@echo "  make all       # Executa fix + format + check"
	@echo "  make test      # Roda todos os testes com cobertura"

setup: install dev-install ## Configura√ß√£o inicial completa do ambiente de desenvolvimento
	@echo "$(GREEN)‚úÖ Ambiente configurado com sucesso!$(NC)"

install: ## Instala depend√™ncias principais
	@echo "$(YELLOW)üì¶ Instalando depend√™ncias principais...$(NC)"
	$(PIP) install -r requirements.txt

dev-install: ## Instala depend√™ncias de desenvolvimento
	@echo "$(YELLOW)üõ†Ô∏è  Instalando depend√™ncias de desenvolvimento...$(NC)"
	$(PIP) install -e .[dev]

check: ## Executa verifica√ß√£o de linting com Ruff
	@echo "$(YELLOW)üîç Executando verifica√ß√£o de linting...$(NC)"
	ruff check $(SRC_DIR) $(TEST_DIR) $(SCRIPTS_DIR)

format: ## Formata c√≥digo com Ruff (recomendado)
	@echo "$(YELLOW)üé® Formatando c√≥digo com Ruff...$(NC)"
	ruff format $(SRC_DIR) $(TEST_DIR) $(SCRIPTS_DIR)

format-black: ## Formata c√≥digo com Black + isort (alternativo)
	@echo "$(YELLOW)üé® Formatando c√≥digo com Black + isort...$(NC)"
	isort $(SRC_DIR) $(TEST_DIR) $(SCRIPTS_DIR)
	black $(SRC_DIR) $(TEST_DIR) $(SCRIPTS_DIR)

fix: ## Executa corre√ß√µes autom√°ticas com Ruff
	@echo "$(YELLOW)üîß Executando corre√ß√µes autom√°ticas...$(NC)"
	ruff check --fix $(SRC_DIR) $(TEST_DIR) $(SCRIPTS_DIR)

lint: check ## Alias para check

test: ## Executa todos os testes com cobertura
	@echo "$(YELLOW)üß™ Executando testes...$(NC)"
	pytest

test-fast: ## Executa testes sem cobertura (mais r√°pido)
	@echo "$(YELLOW)‚ö° Executando testes r√°pidos...$(NC)"
	pytest --no-cov

coverage: ## Gera relat√≥rio de cobertura HTML
	@echo "$(YELLOW)üìä Gerando relat√≥rio de cobertura...$(NC)"
	pytest --cov-report=html
	@echo "$(GREEN)Relat√≥rio dispon√≠vel em htmlcov/index.html$(NC)"

clean: ## Remove arquivos tempor√°rios e cache
	@echo "$(YELLOW)üßπ Limpando arquivos tempor√°rios...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	find . -type d -name ".ruff_cache" -exec rm -rf {} +
	find . -type d -name "htmlcov" -exec rm -rf {} +
	find . -type f -name ".coverage" -delete
	find . -type f -name "*.log" -delete

all: fix format check test ## Executa pipeline completo (fix + format + check + test)
	@echo "$(GREEN)üéâ Pipeline completo executado com sucesso!$(NC)"

# Comandos espec√≠ficos para CI/CD
ci-check: ## Verifica c√≥digo sem fazer altera√ß√µes (para CI)
	@echo "$(YELLOW)üîç Verifica√ß√£o CI/CD...$(NC)"
	ruff check $(SRC_DIR) $(TEST_DIR) $(SCRIPTS_DIR)
	ruff format --check $(SRC_DIR) $(TEST_DIR) $(SCRIPTS_DIR)

ci-test: ## Executa testes para CI/CD
	@echo "$(YELLOW)üß™ Testes CI/CD...$(NC)"
	pytest --cov-report=xml --cov-fail-under=65

# Comandos de desenvolvimento avan√ßado
profile: ## Executa profiling b√°sico do c√≥digo principal
	@echo "$(YELLOW)‚ö° Executando profiling...$(NC)"
	$(PYTHON) -m cProfile -s cumulative $(SRC_DIR)/main.py

run: ## Executa a aplica√ß√£o principal
	@echo "$(YELLOW)üöÄ Executando Texta AI...$(NC)"
	$(PYTHON) $(SRC_DIR)/main.py

run-gui: ## Executa a aplica√ß√£o com GUI
	@echo "$(YELLOW)üñ•Ô∏è  Executando Texta AI (modo GUI)...$(NC)"
	$(PYTHON) $(SRC_DIR)/main.py --gui

# Verifica√ß√µes de ambiente
check-python: ## Verifica instala√ß√£o do Python
	@echo "$(YELLOW)üêç Verificando Python...$(NC)"
	@$(PYTHON) --version || (echo "$(RED)‚ùå Python n√£o encontrado$(NC)" && exit 1)
	@echo "$(GREEN)‚úÖ Python: $(shell $(PYTHON) --version)$(NC)"

check-deps: ## Verifica depend√™ncias instaladas
	@echo "$(YELLOW)üì¶ Verificando depend√™ncias...$(NC)"
	@$(PIP) list | grep -E "(ruff|black|isort|pytest)" || echo "$(RED)‚ùå Algumas depend√™ncias n√£o est√£o instaladas$(NC)"

# Comando de informa√ß√µes do projeto
info: ## Mostra informa√ß√µes do projeto
	@echo "$(GREEN)üìã Informa√ß√µes do Projeto$(NC)"
	@echo "Nome: Texta AI"
	@echo "Vers√£o: 1.0.0"
	@echo "Python: $(shell $(PYTHON) --version)"
	@echo "Diret√≥rios:"
	@echo "  - C√≥digo fonte: $(SRC_DIR)/"
	@echo "  - Testes: $(TEST_DIR)/"
	@echo "  - Scripts: $(SCRIPTS_DIR)/"
	@echo ""
	@echo "$(YELLOW)Ferramentas configuradas:$(NC)"
	@echo "  - Ruff: Linting e formata√ß√£o"
	@echo "  - Black: Formata√ß√£o alternativa"
	@echo "  - isort: Organiza√ß√£o de imports"
	@echo "  - pytest: Framework de testes"

# Comando padr√£o
.DEFAULT_GOAL := help 