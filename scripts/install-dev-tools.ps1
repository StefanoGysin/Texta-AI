# Script PowerShell de instala√ß√£o das ferramentas de desenvolvimento para Texta AI
# Uso: .\scripts\install-dev-tools.ps1

# Configurar pol√≠tica de execu√ß√£o se necess√°rio
# Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

# Cores para output
$Green = "Green"
$Yellow = "Yellow" 
$Red = "Red"

Write-Host "üöÄ Instalando ferramentas de desenvolvimento para Texta AI" -ForegroundColor $Green
Write-Host ""

# Verificar se Python est√° instalado
$pythonCmd = $null
if (Get-Command python3 -ErrorAction SilentlyContinue) {
    $pythonCmd = "python3"
    $pipCmd = "pip3"
}
elseif (Get-Command python -ErrorAction SilentlyContinue) {
    $pythonCmd = "python"
    $pipCmd = "pip"
}
else {
    Write-Host "‚ùå Python n√£o encontrado. Instale o Python 3.9+ primeiro." -ForegroundColor $Red
    Write-Host "Download: https://www.python.org/downloads/" -ForegroundColor $Yellow
    exit 1
}

$pythonVersion = & $pythonCmd --version
Write-Host "üêç Usando Python: $pythonVersion" -ForegroundColor $Yellow

# Verificar vers√£o do Python
$versionOutput = & $pythonCmd -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')"
$version = [Version]$versionOutput
$minVersion = [Version]"3.9"

if ($version -lt $minVersion) {
    Write-Host "‚ùå Python $versionOutput detectado. Este projeto requer Python 3.9 ou superior." -ForegroundColor $Red
    exit 1
}

Write-Host "‚úÖ Python $versionOutput OK" -ForegroundColor $Green

# Verificar se est√° em um ambiente virtual (recomendado)
if ($env:VIRTUAL_ENV) {
    Write-Host "‚úÖ Ambiente virtual detectado: $env:VIRTUAL_ENV" -ForegroundColor $Green
}
else {
    Write-Host "‚ö†Ô∏è  Aviso: N√£o est√° em um ambiente virtual. Recomenda-se usar um venv." -ForegroundColor $Yellow
    Write-Host "   Para criar um: python -m venv .venv && .venv\Scripts\Activate.ps1" -ForegroundColor $Yellow
    Write-Host ""
}

# Atualizar pip
Write-Host "üì¶ Atualizando pip..." -ForegroundColor $Yellow
try {
    & $pipCmd install --upgrade pip
    Write-Host "‚úÖ pip atualizado" -ForegroundColor $Green
}
catch {
    Write-Host "‚ùå Erro ao atualizar pip: $_" -ForegroundColor $Red
    exit 1
}

# Instalar depend√™ncias principais
Write-Host "üì¶ Instalando depend√™ncias principais..." -ForegroundColor $Yellow
try {
    & $pipCmd install -r requirements.txt
    Write-Host "‚úÖ Depend√™ncias principais instaladas" -ForegroundColor $Green
}
catch {
    Write-Host "‚ùå Erro ao instalar depend√™ncias principais: $_" -ForegroundColor $Red
    exit 1
}

# Instalar depend√™ncias de desenvolvimento via pyproject.toml
Write-Host "üõ†Ô∏è  Instalando depend√™ncias de desenvolvimento..." -ForegroundColor $Yellow
try {
    & $pipCmd install -e ".[dev]"
    Write-Host "‚úÖ Depend√™ncias de desenvolvimento instaladas" -ForegroundColor $Green
}
catch {
    Write-Host "‚ùå Erro ao instalar depend√™ncias de desenvolvimento: $_" -ForegroundColor $Red
    exit 1
}

# Verificar instala√ß√£o das ferramentas
Write-Host ""
Write-Host "üîç Verificando instala√ß√£o das ferramentas..." -ForegroundColor $Yellow

# Verificar Ruff
try {
    $ruffVersion = & ruff --version
    Write-Host "‚úÖ Ruff: $ruffVersion" -ForegroundColor $Green
}
catch {
    Write-Host "‚ùå Ruff n√£o instalado corretamente" -ForegroundColor $Red
    exit 1
}

# Verificar Black
try {
    $blackVersion = & black --version
    Write-Host "‚úÖ Black: $($blackVersion -split '\n')[0]" -ForegroundColor $Green
}
catch {
    Write-Host "‚ùå Black n√£o instalado corretamente" -ForegroundColor $Red
    exit 1
}

# Verificar isort
try {
    $isortVersion = & isort --version
    Write-Host "‚úÖ isort: $($isortVersion -split '\n')[0]" -ForegroundColor $Green
}
catch {
    Write-Host "‚ùå isort n√£o instalado corretamente" -ForegroundColor $Red
    exit 1
}

# Verificar pytest
try {
    $pytestVersion = & pytest --version
    Write-Host "‚úÖ pytest: $($pytestVersion -split '\n')[0]" -ForegroundColor $Green
}
catch {
    Write-Host "‚ùå pytest n√£o instalado corretamente" -ForegroundColor $Red
    exit 1
}

Write-Host ""
Write-Host "üéâ Instala√ß√£o conclu√≠da com sucesso!" -ForegroundColor $Green
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor $Yellow
Write-Host "  1. Execute " -NoNewline; Write-Host "python scripts/dev-tools.py check" -ForegroundColor $Green -NoNewline; Write-Host " para verificar o c√≥digo"
Write-Host "  2. Execute " -NoNewline; Write-Host "python scripts/dev-tools.py format" -ForegroundColor $Green -NoNewline; Write-Host " para formatar o c√≥digo"
Write-Host "  3. Execute " -NoNewline; Write-Host "pytest" -ForegroundColor $Green -NoNewline; Write-Host " para rodar os testes"
Write-Host ""
Write-Host "üí° Comandos √∫teis:" -ForegroundColor $Yellow
Write-Host "  ‚Ä¢ " -NoNewline; Write-Host "python scripts/dev-tools.py all" -ForegroundColor $Green -NoNewline; Write-Host "  - Pipeline completo (fix + format + check + test)"
Write-Host "  ‚Ä¢ " -NoNewline; Write-Host "python scripts/dev-tools.py fix" -ForegroundColor $Green -NoNewline; Write-Host "   - Corre√ß√µes autom√°ticas"
Write-Host "  ‚Ä¢ " -NoNewline; Write-Host "ruff check src/" -ForegroundColor $Green -NoNewline; Write-Host "             - Verifica√ß√£o direta"
Write-Host ""
Write-Host "‚ú® Desenvolvimento com qualidade configurado!" -ForegroundColor $Green 