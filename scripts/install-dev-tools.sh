#!/bin/bash
# Script de instala√ß√£o das ferramentas de desenvolvimento para Texta AI
# Uso: bash scripts/install-dev-tools.sh

set -e  # Sair em caso de erro

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}üöÄ Instalando ferramentas de desenvolvimento para Texta AI${NC}"
echo ""

# Verificar se Python est√° instalado
if ! command -v python3 &> /dev/null && ! command -v python &> /dev/null; then
    echo -e "${RED}‚ùå Python n√£o encontrado. Instale o Python 3.9+ primeiro.${NC}"
    exit 1
fi

# Detectar comando Python
if command -v python3 &> /dev/null; then
    PYTHON=python3
    PIP=pip3
else
    PYTHON=python
    PIP=pip
fi

echo -e "${YELLOW}üêç Usando Python: $($PYTHON --version)${NC}"

# Verificar vers√£o do Python
PYTHON_VERSION=$($PYTHON -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
MIN_VERSION="3.9"

if ! $PYTHON -c "import sys; exit(0 if sys.version_info >= (3, 9) else 1)"; then
    echo -e "${RED}‚ùå Python $PYTHON_VERSION detectado. Este projeto requer Python $MIN_VERSION ou superior.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Python $PYTHON_VERSION OK${NC}"

# Verificar se est√° em um ambiente virtual (recomendado)
if [[ "$VIRTUAL_ENV" != "" ]]; then
    echo -e "${GREEN}‚úÖ Ambiente virtual detectado: $VIRTUAL_ENV${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aviso: N√£o est√° em um ambiente virtual. Recomenda-se usar um venv.${NC}"
    echo -e "${YELLOW}   Para criar um: python -m venv .venv && source .venv/bin/activate${NC}"
    echo ""
fi

# Atualizar pip
echo -e "${YELLOW}üì¶ Atualizando pip...${NC}"
$PIP install --upgrade pip

# Instalar depend√™ncias principais
echo -e "${YELLOW}üì¶ Instalando depend√™ncias principais...${NC}"
$PIP install -r requirements.txt

# Instalar depend√™ncias de desenvolvimento via pyproject.toml
echo -e "${YELLOW}üõ†Ô∏è  Instalando depend√™ncias de desenvolvimento...${NC}"
$PIP install -e .[dev]

# Verificar instala√ß√£o das ferramentas
echo ""
echo -e "${YELLOW}üîç Verificando instala√ß√£o das ferramentas...${NC}"

# Verificar Ruff
if command -v ruff &> /dev/null; then
    RUFF_VERSION=$(ruff --version)
    echo -e "${GREEN}‚úÖ Ruff: $RUFF_VERSION${NC}"
else
    echo -e "${RED}‚ùå Ruff n√£o instalado corretamente${NC}"
    exit 1
fi

# Verificar Black
if command -v black &> /dev/null; then
    BLACK_VERSION=$(black --version | head -n1)
    echo -e "${GREEN}‚úÖ Black: $BLACK_VERSION${NC}"
else
    echo -e "${RED}‚ùå Black n√£o instalado corretamente${NC}"
    exit 1
fi

# Verificar isort
if command -v isort &> /dev/null; then
    ISORT_VERSION=$(isort --version | head -n1)
    echo -e "${GREEN}‚úÖ isort: $ISORT_VERSION${NC}"
else
    echo -e "${RED}‚ùå isort n√£o instalado corretamente${NC}"
    exit 1
fi

# Verificar pytest
if command -v pytest &> /dev/null; then
    PYTEST_VERSION=$(pytest --version | head -n1)
    echo -e "${GREEN}‚úÖ pytest: $PYTEST_VERSION${NC}"
else
    echo -e "${RED}‚ùå pytest n√£o instalado corretamente${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}üéâ Instala√ß√£o conclu√≠da com sucesso!${NC}"
echo ""
echo -e "${YELLOW}üìã Pr√≥ximos passos:${NC}"
echo -e "  1. Execute ${GREEN}make help${NC} para ver comandos dispon√≠veis"
echo -e "  2. Execute ${GREEN}make check${NC} para verificar o c√≥digo"
echo -e "  3. Execute ${GREEN}make format${NC} para formatar o c√≥digo"
echo -e "  4. Execute ${GREEN}make test${NC} para rodar os testes"
echo ""
echo -e "${YELLOW}üí° Comandos √∫teis:${NC}"
echo -e "  ‚Ä¢ ${GREEN}make all${NC}     - Pipeline completo (fix + format + check + test)"
echo -e "  ‚Ä¢ ${GREEN}make fix${NC}     - Corre√ß√µes autom√°ticas"
echo -e "  ‚Ä¢ ${GREEN}make clean${NC}   - Limpar arquivos tempor√°rios"
echo ""
echo -e "${GREEN}‚ú® Desenvolvimento com qualidade configurado!${NC}" 